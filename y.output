State 102 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmt
    3      | stmts stmt

    4 stmt: expr SEMI
    5     | ifstmt
    6     | whilestmt
    7     | forstmt
    8     | returnstmt
    9     | break SEMI
   10     | continue SEMI
   11     | block
   12     | funcdef
   13     | SEMI

   14 expr: assignexpr
   15     | expr PLUS expr
   16     | expr MINUS expr
   17     | expr MUL expr
   18     | expr DIV expr
   19     | expr MOD expr
   20     | expr GREATER expr
   21     | expr GREATER_EQ expr
   22     | expr LESS expr
   23     | expr LESS_EQ expr
   24     | expr EQ expr
   25     | expr NOT_EQ expr

   26 $@1: %empty

   27 expr: expr AND $@1 M expr

   28 $@2: %empty

   29 expr: expr OR $@2 M expr
   30     | term

   31 term: L_PAR expr R_PAR
   32     | MINUS expr
   33     | NOT expr
   34     | D_PLUS lvalue
   35     | lvalue D_PLUS
   36     | D_MINUS lvalue
   37     | lvalue D_MINUS
   38     | primary

   39 assignexpr: lvalue ASSIGN expr

   40 primary: lvalue
   41        | call
   42        | objectdef
   43        | L_PAR funcdef R_PAR
   44        | const

   45 lvalue: ID
   46       | LOCAL ID
   47       | D_COLON ID
   48       | member

   49 member: lvalue DOT ID
   50       | lvalue L_BRA expr R_BRA
   51       | call DOT ID
   52       | call L_BRA expr R_BRA

   53 call: call L_PAR elist R_PAR
   54     | lvalue callsuffix
   55     | L_PAR funcdef R_PAR L_PAR elist R_PAR

   56 callsuffix: normcall
   57           | methodcall

   58 normcall: L_PAR elist R_PAR

   59 methodcall: D_DOT ID L_PAR elist R_PAR

   60 elist: expr comma_elist
   61      | %empty

   62 comma_elist: COMMA expr comma_elist
   63            | %empty

   64 objectdef: L_BRA elist R_BRA
   65          | L_BRA indexed R_BRA

   66 indexed: indexedelem indexed_tmp

   67 indexed_tmp: COMMA indexedelem indexed_tmp
   68            | %empty

   69 indexedelem: LC_BRA expr COLON expr RC_BRA

   70 rec_stmt: rec_stmt stmt
   71         | %empty

   72 $@3: %empty

   73 block: LC_BRA $@3 rec_stmt RC_BRA

   74 funcname: ID
   75         | %empty

   76 funcprefix: FUNC funcname

   77 funcargs: L_PAR idlist R_PAR

   78 funcbody: block

   79 funcblockstart: %empty

   80 funcblockend: %empty

   81 funcdef: funcprefix funcargs funcblockstart funcbody funcblockend

   82 const: INT
   83      | REAL
   84      | STRING
   85      | NIL
   86      | TRUE
   87      | FALSE

   88 idlist: ID
   89       | idlist COMMA ID
   90       | %empty

   91 ifprefix: IF L_PAR expr R_PAR

   92 elseprefix: ELSE

   93 ifstmt: ifprefix stmt
   94       | ifprefix stmt elseprefix stmt

   95 whilestart: WHILE

   96 whilecond: L_PAR expr R_PAR

   97 whilestmt: whilestart whilecond stmt

   98 N: %empty

   99 M: %empty

  100 $@4: %empty

  101 forprefix: FOR $@4 L_PAR elist SEMI M expr SEMI

  102 $@5: %empty

  103 forstmt: forprefix N elist R_PAR N stmt $@5 N

  104 break: BREAK

  105 continue: CONTINUE

  106 returnstmt: RETURN SEMI
  107           | RETURN expr SEMI


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ASSIGN <strval> (258) 39
    OR <strval> (259) 29
    AND <strval> (260) 27
    EQ <strval> (261) 24
    NOT_EQ <strval> (262) 25
    GREATER <strval> (263) 20
    GREATER_EQ <strval> (264) 21
    LESS <strval> (265) 22
    LESS_EQ <strval> (266) 23
    PLUS <strval> (267) 15
    MINUS <strval> (268) 16 32
    MUL <strval> (269) 17
    DIV <strval> (270) 18
    MOD <strval> (271) 19
    NOT (272) 33
    D_PLUS <strval> (273) 34 35
    D_MINUS <strval> (274) 36 37
    UMINUS <strval> (275)
    DOT <strval> (276) 49 51
    D_DOT <strval> (277) 59
    L_BRA <strval> (278) 50 52 64 65
    R_BRA <strval> (279) 50 52 64 65
    L_PAR <strval> (280) 31 43 53 55 58 59 77 91 96 101
    R_PAR <strval> (281) 31 43 53 55 58 59 77 91 96 103
    INT <intval> (282) 82
    REAL <floatval> (283) 83
    ID <strval> (284) 45 46 47 49 51 59 74 88 89
    STRING <strval> (285) 84
    IF <strval> (286) 91
    ELSE <strval> (287) 92
    WHILE <strval> (288) 95
    FOR <strval> (289) 101
    FUNC <strval> (290) 76
    RETURN <strval> (291) 106 107
    BREAK <strval> (292) 104
    CONTINUE <strval> (293) 105
    LOCAL <strval> (294) 46
    TRUE <strval> (295) 86
    FALSE <strval> (296) 87
    NIL <strval> (297) 85
    LC_BRA <strval> (298) 69 73
    RC_BRA <strval> (299) 69 73
    SEMI <strval> (300) 4 9 10 13 101 106 107
    COMMA <strval> (301) 62 67 89
    COLON <strval> (302) 69
    D_COLON <strval> (303) 47


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program (50)
        on left: 1
        on right: 0
    stmts <stmtval> (51)
        on left: 2 3
        on right: 1 3
    stmt <stmtval> (52)
        on left: 4 5 6 7 8 9 10 11 12 13
        on right: 2 3 70 93 94 97 103
    expr <exprval> (53)
        on left: 14 15 16 17 18 19 20 21 22 23 24 25 27 29 30
        on right: 4 15 16 17 18 19 20 21 22 23 24 25 27 29 31 32 33 39 50 52 60 62 69 91 96 101 107
    $@1 (54)
        on left: 26
        on right: 27
    $@2 (55)
        on left: 28
        on right: 29
    term <exprval> (56)
        on left: 31 32 33 34 35 36 37 38
        on right: 30
    assignexpr <exprval> (57)
        on left: 39
        on right: 14
    primary <exprval> (58)
        on left: 40 41 42 43 44
        on right: 38
    lvalue <exprval> (59)
        on left: 45 46 47 48
        on right: 34 35 36 37 39 40 49 50 54
    member <exprval> (60)
        on left: 49 50 51 52
        on right: 48
    call <exprval> (61)
        on left: 53 54 55
        on right: 41 51 52 53
    callsuffix <callval> (62)
        on left: 56 57
        on right: 54
    normcall <callval> (63)
        on left: 58
        on right: 56
    methodcall <callval> (64)
        on left: 59
        on right: 57
    elist <exprval> (65)
        on left: 60 61
        on right: 53 55 58 59 64 101 103
    comma_elist <exprval> (66)
        on left: 62 63
        on right: 60 62
    objectdef <exprval> (67)
        on left: 64 65
        on right: 42
    indexed <exprval> (68)
        on left: 66
        on right: 65
    indexed_tmp <exprval> (69)
        on left: 67 68
        on right: 66 67
    indexedelem <exprval> (70)
        on left: 69
        on right: 66 67
    rec_stmt <stmtval> (71)
        on left: 70 71
        on right: 70 73
    block <stmtval> (72)
        on left: 73
        on right: 11 78
    $@3 (73)
        on left: 72
        on right: 73
    funcname <strval> (74)
        on left: 74 75
        on right: 76
    funcprefix <symval> (75)
        on left: 76
        on right: 81
    funcargs <strval> (76)
        on left: 77
        on right: 81
    funcbody <intval> (77)
        on left: 78
        on right: 81
    funcblockstart <strval> (78)
        on left: 79
        on right: 81
    funcblockend <strval> (79)
        on left: 80
        on right: 81
    funcdef <symval> (80)
        on left: 81
        on right: 12 43 55
    const <exprval> (81)
        on left: 82 83 84 85 86 87
        on right: 44
    idlist <strval> (82)
        on left: 88 89 90
        on right: 77 89
    ifprefix <intval> (83)
        on left: 91
        on right: 93 94
    elseprefix <intval> (84)
        on left: 92
        on right: 94
    ifstmt <stmtval> (85)
        on left: 93 94
        on right: 5
    whilestart <intval> (86)
        on left: 95
        on right: 97
    whilecond <intval> (87)
        on left: 96
        on right: 97
    whilestmt <stmtval> (88)
        on left: 97
        on right: 6
    N <intval> (89)
        on left: 98
        on right: 103
    M <intval> (90)
        on left: 99
        on right: 27 29 101
    forprefix <prefval> (91)
        on left: 101
        on right: 103
    $@4 (92)
        on left: 100
        on right: 101
    forstmt <stmtval> (93)
        on left: 103
        on right: 7
    $@5 (94)
        on left: 102
        on right: 103
    break <stmtval> (95)
        on left: 104
        on right: 9
    continue <stmtval> (96)
        on left: 105
        on right: 10
    returnstmt <stmtval> (97)
        on left: 106 107
        on right: 8


State 0

    0 $accept: . program $end

    MINUS     shift, and go to state 1
    NOT       shift, and go to state 2
    D_PLUS    shift, and go to state 3
    D_MINUS   shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    program     go to state 25
    stmts       go to state 26
    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcprefix  go to state 37
    funcdef     go to state 38
    const       go to state 39
    ifprefix    go to state 40
    ifstmt      go to state 41
    whilestart  go to state 42
    whilestmt   go to state 43
    forprefix   go to state 44
    forstmt     go to state 45
    break       go to state 46
    continue    go to state 47
    returnstmt  go to state 48


State 1

   32 term: MINUS . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 49
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 2

   33 term: NOT . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 50
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 3

   34 term: D_PLUS . lvalue

    L_PAR    shift, and go to state 51
    ID       shift, and go to state 9
    LOCAL    shift, and go to state 18
    D_COLON  shift, and go to state 24

    lvalue  go to state 52
    member  go to state 33
    call    go to state 53


State 4

   36 term: D_MINUS . lvalue

    L_PAR    shift, and go to state 51
    ID       shift, and go to state 9
    LOCAL    shift, and go to state 18
    D_COLON  shift, and go to state 24

    lvalue  go to state 54
    member  go to state 33
    call    go to state 53


State 5

   64 objectdef: L_BRA . elist R_BRA
   65          | L_BRA . indexed R_BRA

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    LC_BRA   shift, and go to state 55
    D_COLON  shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr         go to state 56
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    elist        go to state 57
    objectdef    go to state 35
    indexed      go to state 58
    indexedelem  go to state 59
    const        go to state 39


State 6

   31 term: L_PAR . expr R_PAR
   43 primary: L_PAR . funcdef R_PAR
   55 call: L_PAR . funcdef R_PAR L_PAR elist R_PAR

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    FUNC     shift, and go to state 14
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 60
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    funcprefix  go to state 37
    funcdef     go to state 61
    const       go to state 39


State 7

   82 const: INT .

    $default  reduce using rule 82 (const)


State 8

   83 const: REAL .

    $default  reduce using rule 83 (const)


State 9

   45 lvalue: ID .

    $default  reduce using rule 45 (lvalue)


State 10

   84 const: STRING .

    $default  reduce using rule 84 (const)


State 11

   91 ifprefix: IF . L_PAR expr R_PAR

    L_PAR  shift, and go to state 62


State 12

   95 whilestart: WHILE .

    $default  reduce using rule 95 (whilestart)


State 13

  101 forprefix: FOR . $@4 L_PAR elist SEMI M expr SEMI

    $default  reduce using rule 100 ($@4)

    $@4  go to state 63


State 14

   76 funcprefix: FUNC . funcname

    ID  shift, and go to state 64

    $default  reduce using rule 75 (funcname)

    funcname  go to state 65


State 15

  106 returnstmt: RETURN . SEMI
  107           | RETURN . expr SEMI

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    SEMI     shift, and go to state 66
    D_COLON  shift, and go to state 24

    expr        go to state 67
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 16

  104 break: BREAK .

    $default  reduce using rule 104 (break)


State 17

  105 continue: CONTINUE .

    $default  reduce using rule 105 (continue)


State 18

   46 lvalue: LOCAL . ID

    ID  shift, and go to state 68


State 19

   86 const: TRUE .

    $default  reduce using rule 86 (const)


State 20

   87 const: FALSE .

    $default  reduce using rule 87 (const)


State 21

   85 const: NIL .

    $default  reduce using rule 85 (const)


State 22

   73 block: LC_BRA . $@3 rec_stmt RC_BRA

    $default  reduce using rule 72 ($@3)

    $@3  go to state 69


State 23

   13 stmt: SEMI .

    $default  reduce using rule 13 (stmt)


State 24

   47 lvalue: D_COLON . ID

    ID  shift, and go to state 70


State 25

    0 $accept: program . $end

    $end  shift, and go to state 71


State 26

    1 program: stmts .
    3 stmts: stmts . stmt

    MINUS     shift, and go to state 1
    NOT       shift, and go to state 2
    D_PLUS    shift, and go to state 3
    D_MINUS   shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    $default  reduce using rule 1 (program)

    stmt        go to state 72
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcprefix  go to state 37
    funcdef     go to state 38
    const       go to state 39
    ifprefix    go to state 40
    ifstmt      go to state 41
    whilestart  go to state 42
    whilestmt   go to state 43
    forprefix   go to state 44
    forstmt     go to state 45
    break       go to state 46
    continue    go to state 47
    returnstmt  go to state 48


State 27

    2 stmts: stmt .

    $default  reduce using rule 2 (stmts)


State 28

    4 stmt: expr . SEMI
   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85
    SEMI        shift, and go to state 86


State 29

   30 expr: term .

    $default  reduce using rule 30 (expr)


State 30

   14 expr: assignexpr .

    $default  reduce using rule 14 (expr)


State 31

   38 term: primary .

    $default  reduce using rule 38 (term)


State 32

   35 term: lvalue . D_PLUS
   37     | lvalue . D_MINUS
   39 assignexpr: lvalue . ASSIGN expr
   40 primary: lvalue .
   49 member: lvalue . DOT ID
   50       | lvalue . L_BRA expr R_BRA
   54 call: lvalue . callsuffix

    ASSIGN   shift, and go to state 87
    D_PLUS   shift, and go to state 88
    D_MINUS  shift, and go to state 89
    DOT      shift, and go to state 90
    D_DOT    shift, and go to state 91
    L_BRA    shift, and go to state 92
    L_PAR    shift, and go to state 93

    $default  reduce using rule 40 (primary)

    callsuffix  go to state 94
    normcall    go to state 95
    methodcall  go to state 96


State 33

   48 lvalue: member .

    $default  reduce using rule 48 (lvalue)


State 34

   41 primary: call .
   51 member: call . DOT ID
   52       | call . L_BRA expr R_BRA
   53 call: call . L_PAR elist R_PAR

    DOT    shift, and go to state 97
    L_BRA  shift, and go to state 98
    L_PAR  shift, and go to state 99

    $default  reduce using rule 41 (primary)


State 35

   42 primary: objectdef .

    $default  reduce using rule 42 (primary)


State 36

   11 stmt: block .

    $default  reduce using rule 11 (stmt)


State 37

   81 funcdef: funcprefix . funcargs funcblockstart funcbody funcblockend

    L_PAR  shift, and go to state 100

    funcargs  go to state 101


State 38

   12 stmt: funcdef .

    $default  reduce using rule 12 (stmt)


State 39

   44 primary: const .

    $default  reduce using rule 44 (primary)


State 40

   93 ifstmt: ifprefix . stmt
   94       | ifprefix . stmt elseprefix stmt

    MINUS     shift, and go to state 1
    NOT       shift, and go to state 2
    D_PLUS    shift, and go to state 3
    D_MINUS   shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 102
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcprefix  go to state 37
    funcdef     go to state 38
    const       go to state 39
    ifprefix    go to state 40
    ifstmt      go to state 41
    whilestart  go to state 42
    whilestmt   go to state 43
    forprefix   go to state 44
    forstmt     go to state 45
    break       go to state 46
    continue    go to state 47
    returnstmt  go to state 48


State 41

    5 stmt: ifstmt .

    $default  reduce using rule 5 (stmt)


State 42

   97 whilestmt: whilestart . whilecond stmt

    L_PAR  shift, and go to state 103

    whilecond  go to state 104


State 43

    6 stmt: whilestmt .

    $default  reduce using rule 6 (stmt)


State 44

  103 forstmt: forprefix . N elist R_PAR N stmt $@5 N

    $default  reduce using rule 98 (N)

    N  go to state 105


State 45

    7 stmt: forstmt .

    $default  reduce using rule 7 (stmt)


State 46

    9 stmt: break . SEMI

    SEMI  shift, and go to state 106


State 47

   10 stmt: continue . SEMI

    SEMI  shift, and go to state 107


State 48

    8 stmt: returnstmt .

    $default  reduce using rule 8 (stmt)


State 49

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   32 term: MINUS expr .

    $default  reduce using rule 32 (term)


State 50

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   33 term: NOT expr .

    $default  reduce using rule 33 (term)


State 51

   55 call: L_PAR . funcdef R_PAR L_PAR elist R_PAR

    FUNC  shift, and go to state 14

    funcprefix  go to state 37
    funcdef     go to state 108


State 52

   34 term: D_PLUS lvalue .
   49 member: lvalue . DOT ID
   50       | lvalue . L_BRA expr R_BRA
   54 call: lvalue . callsuffix

    DOT    shift, and go to state 90
    D_DOT  shift, and go to state 91
    L_BRA  shift, and go to state 92
    L_PAR  shift, and go to state 93

    $default  reduce using rule 34 (term)

    callsuffix  go to state 94
    normcall    go to state 95
    methodcall  go to state 96


State 53

   51 member: call . DOT ID
   52       | call . L_BRA expr R_BRA
   53 call: call . L_PAR elist R_PAR

    DOT    shift, and go to state 97
    L_BRA  shift, and go to state 98
    L_PAR  shift, and go to state 99


State 54

   36 term: D_MINUS lvalue .
   49 member: lvalue . DOT ID
   50       | lvalue . L_BRA expr R_BRA
   54 call: lvalue . callsuffix

    DOT    shift, and go to state 90
    D_DOT  shift, and go to state 91
    L_BRA  shift, and go to state 92
    L_PAR  shift, and go to state 93

    $default  reduce using rule 36 (term)

    callsuffix  go to state 94
    normcall    go to state 95
    methodcall  go to state 96


State 55

   69 indexedelem: LC_BRA . expr COLON expr RC_BRA

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 109
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 56

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   60 elist: expr . comma_elist

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85
    COMMA       shift, and go to state 110

    $default  reduce using rule 63 (comma_elist)

    comma_elist  go to state 111


State 57

   64 objectdef: L_BRA elist . R_BRA

    R_BRA  shift, and go to state 112


State 58

   65 objectdef: L_BRA indexed . R_BRA

    R_BRA  shift, and go to state 113


State 59

   66 indexed: indexedelem . indexed_tmp

    COMMA  shift, and go to state 114

    $default  reduce using rule 68 (indexed_tmp)

    indexed_tmp  go to state 115


State 60

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   31 term: L_PAR expr . R_PAR

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85
    R_PAR       shift, and go to state 116


State 61

   43 primary: L_PAR funcdef . R_PAR
   55 call: L_PAR funcdef . R_PAR L_PAR elist R_PAR

    R_PAR  shift, and go to state 117


State 62

   91 ifprefix: IF L_PAR . expr R_PAR

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 118
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 63

  101 forprefix: FOR $@4 . L_PAR elist SEMI M expr SEMI

    L_PAR  shift, and go to state 119


State 64

   74 funcname: ID .

    $default  reduce using rule 74 (funcname)


State 65

   76 funcprefix: FUNC funcname .

    $default  reduce using rule 76 (funcprefix)


State 66

  106 returnstmt: RETURN SEMI .

    $default  reduce using rule 106 (returnstmt)


State 67

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
  107 returnstmt: RETURN expr . SEMI

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85
    SEMI        shift, and go to state 120


State 68

   46 lvalue: LOCAL ID .

    $default  reduce using rule 46 (lvalue)


State 69

   73 block: LC_BRA $@3 . rec_stmt RC_BRA

    $default  reduce using rule 71 (rec_stmt)

    rec_stmt  go to state 121


State 70

   47 lvalue: D_COLON ID .

    $default  reduce using rule 47 (lvalue)


State 71

    0 $accept: program $end .

    $default  accept


State 72

    3 stmts: stmts stmt .

    $default  reduce using rule 3 (stmts)


State 73

   29 expr: expr OR . $@2 M expr

    $default  reduce using rule 28 ($@2)

    $@2  go to state 122


State 74

   27 expr: expr AND . $@1 M expr

    $default  reduce using rule 26 ($@1)

    $@1  go to state 123


State 75

   24 expr: expr EQ . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 124
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 76

   25 expr: expr NOT_EQ . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 125
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 77

   20 expr: expr GREATER . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 126
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 78

   21 expr: expr GREATER_EQ . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 127
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 79

   22 expr: expr LESS . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 128
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 80

   23 expr: expr LESS_EQ . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 129
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 81

   15 expr: expr PLUS . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 130
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 82

   16 expr: expr MINUS . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 131
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 83

   17 expr: expr MUL . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 132
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 84

   18 expr: expr DIV . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 133
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 85

   19 expr: expr MOD . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 134
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 86

    4 stmt: expr SEMI .

    $default  reduce using rule 4 (stmt)


State 87

   39 assignexpr: lvalue ASSIGN . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 135
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 88

   35 term: lvalue D_PLUS .

    $default  reduce using rule 35 (term)


State 89

   37 term: lvalue D_MINUS .

    $default  reduce using rule 37 (term)


State 90

   49 member: lvalue DOT . ID

    ID  shift, and go to state 136


State 91

   59 methodcall: D_DOT . ID L_PAR elist R_PAR

    ID  shift, and go to state 137


State 92

   50 member: lvalue L_BRA . expr R_BRA

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 138
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 93

   58 normcall: L_PAR . elist R_PAR

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 56
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 139
    objectdef   go to state 35
    const       go to state 39


State 94

   54 call: lvalue callsuffix .

    $default  reduce using rule 54 (call)


State 95

   56 callsuffix: normcall .

    $default  reduce using rule 56 (callsuffix)


State 96

   57 callsuffix: methodcall .

    $default  reduce using rule 57 (callsuffix)


State 97

   51 member: call DOT . ID

    ID  shift, and go to state 140


State 98

   52 member: call L_BRA . expr R_BRA

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 141
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 99

   53 call: call L_PAR . elist R_PAR

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 56
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 142
    objectdef   go to state 35
    const       go to state 39


State 100

   77 funcargs: L_PAR . idlist R_PAR

    ID  shift, and go to state 143

    $default  reduce using rule 90 (idlist)

    idlist  go to state 144


State 101

   81 funcdef: funcprefix funcargs . funcblockstart funcbody funcblockend

    $default  reduce using rule 79 (funcblockstart)

    funcblockstart  go to state 145


State 102

   93 ifstmt: ifprefix stmt .
   94       | ifprefix stmt . elseprefix stmt

    ELSE  shift, and go to state 146

    ELSE      [reduce using rule 93 (ifstmt)]
    $default  reduce using rule 93 (ifstmt)

    elseprefix  go to state 147


State 103

   96 whilecond: L_PAR . expr R_PAR

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 148
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 104

   97 whilestmt: whilestart whilecond . stmt

    MINUS     shift, and go to state 1
    NOT       shift, and go to state 2
    D_PLUS    shift, and go to state 3
    D_MINUS   shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 149
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcprefix  go to state 37
    funcdef     go to state 38
    const       go to state 39
    ifprefix    go to state 40
    ifstmt      go to state 41
    whilestart  go to state 42
    whilestmt   go to state 43
    forprefix   go to state 44
    forstmt     go to state 45
    break       go to state 46
    continue    go to state 47
    returnstmt  go to state 48


State 105

  103 forstmt: forprefix N . elist R_PAR N stmt $@5 N

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 56
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 150
    objectdef   go to state 35
    const       go to state 39


State 106

    9 stmt: break SEMI .

    $default  reduce using rule 9 (stmt)


State 107

   10 stmt: continue SEMI .

    $default  reduce using rule 10 (stmt)


State 108

   55 call: L_PAR funcdef . R_PAR L_PAR elist R_PAR

    R_PAR  shift, and go to state 151


State 109

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   69 indexedelem: LC_BRA expr . COLON expr RC_BRA

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85
    COLON       shift, and go to state 152


State 110

   62 comma_elist: COMMA . expr comma_elist

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 153
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 111

   60 elist: expr comma_elist .

    $default  reduce using rule 60 (elist)


State 112

   64 objectdef: L_BRA elist R_BRA .

    $default  reduce using rule 64 (objectdef)


State 113

   65 objectdef: L_BRA indexed R_BRA .

    $default  reduce using rule 65 (objectdef)


State 114

   67 indexed_tmp: COMMA . indexedelem indexed_tmp

    LC_BRA  shift, and go to state 55

    indexedelem  go to state 154


State 115

   66 indexed: indexedelem indexed_tmp .

    $default  reduce using rule 66 (indexed)


State 116

   31 term: L_PAR expr R_PAR .

    $default  reduce using rule 31 (term)


State 117

   43 primary: L_PAR funcdef R_PAR .
   55 call: L_PAR funcdef R_PAR . L_PAR elist R_PAR

    L_PAR  shift, and go to state 155

    $default  reduce using rule 43 (primary)


State 118

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   91 ifprefix: IF L_PAR expr . R_PAR

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85
    R_PAR       shift, and go to state 156


State 119

  101 forprefix: FOR $@4 L_PAR . elist SEMI M expr SEMI

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 56
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 157
    objectdef   go to state 35
    const       go to state 39


State 120

  107 returnstmt: RETURN expr SEMI .

    $default  reduce using rule 107 (returnstmt)


State 121

   70 rec_stmt: rec_stmt . stmt
   73 block: LC_BRA $@3 rec_stmt . RC_BRA

    MINUS     shift, and go to state 1
    NOT       shift, and go to state 2
    D_PLUS    shift, and go to state 3
    D_MINUS   shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    RC_BRA    shift, and go to state 158
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 159
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcprefix  go to state 37
    funcdef     go to state 38
    const       go to state 39
    ifprefix    go to state 40
    ifstmt      go to state 41
    whilestart  go to state 42
    whilestmt   go to state 43
    forprefix   go to state 44
    forstmt     go to state 45
    break       go to state 46
    continue    go to state 47
    returnstmt  go to state 48


State 122

   29 expr: expr OR $@2 . M expr

    $default  reduce using rule 99 (M)

    M  go to state 160


State 123

   27 expr: expr AND $@1 . M expr

    $default  reduce using rule 99 (M)

    M  go to state 161


State 124

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   24     | expr EQ expr .
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr

    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 125

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   25     | expr NOT_EQ expr .
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr

    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 25 (expr)


State 126

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   20     | expr GREATER expr .
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr

    PLUS   shift, and go to state 81
    MINUS  shift, and go to state 82
    MUL    shift, and go to state 83
    DIV    shift, and go to state 84
    MOD    shift, and go to state 85

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 20 (expr)


State 127

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   21     | expr GREATER_EQ expr .
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr

    PLUS   shift, and go to state 81
    MINUS  shift, and go to state 82
    MUL    shift, and go to state 83
    DIV    shift, and go to state 84
    MOD    shift, and go to state 85

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 21 (expr)


State 128

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   22     | expr LESS expr .
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr

    PLUS   shift, and go to state 81
    MINUS  shift, and go to state 82
    MUL    shift, and go to state 83
    DIV    shift, and go to state 84
    MOD    shift, and go to state 85

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 22 (expr)


State 129

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   23     | expr LESS_EQ expr .
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr

    PLUS   shift, and go to state 81
    MINUS  shift, and go to state 82
    MUL    shift, and go to state 83
    DIV    shift, and go to state 84
    MOD    shift, and go to state 85

    GREATER     error (nonassociative)
    GREATER_EQ  error (nonassociative)
    LESS        error (nonassociative)
    LESS_EQ     error (nonassociative)

    $default  reduce using rule 23 (expr)


State 130

   15 expr: expr . PLUS expr
   15     | expr PLUS expr .
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr

    MUL  shift, and go to state 83
    DIV  shift, and go to state 84
    MOD  shift, and go to state 85

    $default  reduce using rule 15 (expr)


State 131

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   16     | expr MINUS expr .
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr

    MUL  shift, and go to state 83
    DIV  shift, and go to state 84
    MOD  shift, and go to state 85

    $default  reduce using rule 16 (expr)


State 132

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   17     | expr MUL expr .
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr

    $default  reduce using rule 17 (expr)


State 133

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   18     | expr DIV expr .
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr

    $default  reduce using rule 18 (expr)


State 134

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   19     | expr MOD expr .
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr

    $default  reduce using rule 19 (expr)


State 135

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   39 assignexpr: lvalue ASSIGN expr .

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85

    $default  reduce using rule 39 (assignexpr)


State 136

   49 member: lvalue DOT ID .

    $default  reduce using rule 49 (member)


State 137

   59 methodcall: D_DOT ID . L_PAR elist R_PAR

    L_PAR  shift, and go to state 162


State 138

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   50 member: lvalue L_BRA expr . R_BRA

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85
    R_BRA       shift, and go to state 163


State 139

   58 normcall: L_PAR elist . R_PAR

    R_PAR  shift, and go to state 164


State 140

   51 member: call DOT ID .

    $default  reduce using rule 51 (member)


State 141

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   52 member: call L_BRA expr . R_BRA

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85
    R_BRA       shift, and go to state 165


State 142

   53 call: call L_PAR elist . R_PAR

    R_PAR  shift, and go to state 166


State 143

   88 idlist: ID .

    $default  reduce using rule 88 (idlist)


State 144

   77 funcargs: L_PAR idlist . R_PAR
   89 idlist: idlist . COMMA ID

    R_PAR  shift, and go to state 167
    COMMA  shift, and go to state 168


State 145

   81 funcdef: funcprefix funcargs funcblockstart . funcbody funcblockend

    LC_BRA  shift, and go to state 22

    block     go to state 169
    funcbody  go to state 170


State 146

   92 elseprefix: ELSE .

    $default  reduce using rule 92 (elseprefix)


State 147

   94 ifstmt: ifprefix stmt elseprefix . stmt

    MINUS     shift, and go to state 1
    NOT       shift, and go to state 2
    D_PLUS    shift, and go to state 3
    D_MINUS   shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 171
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcprefix  go to state 37
    funcdef     go to state 38
    const       go to state 39
    ifprefix    go to state 40
    ifstmt      go to state 41
    whilestart  go to state 42
    whilestmt   go to state 43
    forprefix   go to state 44
    forstmt     go to state 45
    break       go to state 46
    continue    go to state 47
    returnstmt  go to state 48


State 148

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   96 whilecond: L_PAR expr . R_PAR

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85
    R_PAR       shift, and go to state 172


State 149

   97 whilestmt: whilestart whilecond stmt .

    $default  reduce using rule 97 (whilestmt)


State 150

  103 forstmt: forprefix N elist . R_PAR N stmt $@5 N

    R_PAR  shift, and go to state 173


State 151

   55 call: L_PAR funcdef R_PAR . L_PAR elist R_PAR

    L_PAR  shift, and go to state 155


State 152

   69 indexedelem: LC_BRA expr COLON . expr RC_BRA

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 174
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 153

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   62 comma_elist: COMMA expr . comma_elist

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85
    COMMA       shift, and go to state 110

    $default  reduce using rule 63 (comma_elist)

    comma_elist  go to state 175


State 154

   67 indexed_tmp: COMMA indexedelem . indexed_tmp

    COMMA  shift, and go to state 114

    $default  reduce using rule 68 (indexed_tmp)

    indexed_tmp  go to state 176


State 155

   55 call: L_PAR funcdef R_PAR L_PAR . elist R_PAR

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 56
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 177
    objectdef   go to state 35
    const       go to state 39


State 156

   91 ifprefix: IF L_PAR expr R_PAR .

    $default  reduce using rule 91 (ifprefix)


State 157

  101 forprefix: FOR $@4 L_PAR elist . SEMI M expr SEMI

    SEMI  shift, and go to state 178


State 158

   73 block: LC_BRA $@3 rec_stmt RC_BRA .

    $default  reduce using rule 73 (block)


State 159

   70 rec_stmt: rec_stmt stmt .

    $default  reduce using rule 70 (rec_stmt)


State 160

   29 expr: expr OR $@2 M . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 179
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 161

   27 expr: expr AND $@1 M . expr

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 180
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 162

   59 methodcall: D_DOT ID L_PAR . elist R_PAR

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 56
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 181
    objectdef   go to state 35
    const       go to state 39


State 163

   50 member: lvalue L_BRA expr R_BRA .

    $default  reduce using rule 50 (member)


State 164

   58 normcall: L_PAR elist R_PAR .

    $default  reduce using rule 58 (normcall)


State 165

   52 member: call L_BRA expr R_BRA .

    $default  reduce using rule 52 (member)


State 166

   53 call: call L_PAR elist R_PAR .

    $default  reduce using rule 53 (call)


State 167

   77 funcargs: L_PAR idlist R_PAR .

    $default  reduce using rule 77 (funcargs)


State 168

   89 idlist: idlist COMMA . ID

    ID  shift, and go to state 182


State 169

   78 funcbody: block .

    $default  reduce using rule 78 (funcbody)


State 170

   81 funcdef: funcprefix funcargs funcblockstart funcbody . funcblockend

    $default  reduce using rule 80 (funcblockend)

    funcblockend  go to state 183


State 171

   94 ifstmt: ifprefix stmt elseprefix stmt .

    $default  reduce using rule 94 (ifstmt)


State 172

   96 whilecond: L_PAR expr R_PAR .

    $default  reduce using rule 96 (whilecond)


State 173

  103 forstmt: forprefix N elist R_PAR . N stmt $@5 N

    $default  reduce using rule 98 (N)

    N  go to state 184


State 174

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   69 indexedelem: LC_BRA expr COLON expr . RC_BRA

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85
    RC_BRA      shift, and go to state 185


State 175

   62 comma_elist: COMMA expr comma_elist .

    $default  reduce using rule 62 (comma_elist)


State 176

   67 indexed_tmp: COMMA indexedelem indexed_tmp .

    $default  reduce using rule 67 (indexed_tmp)


State 177

   55 call: L_PAR funcdef R_PAR L_PAR elist . R_PAR

    R_PAR  shift, and go to state 186


State 178

  101 forprefix: FOR $@4 L_PAR elist SEMI . M expr SEMI

    $default  reduce using rule 99 (M)

    M  go to state 187


State 179

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
   29     | expr OR $@2 M expr .

    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85

    $default  reduce using rule 29 (expr)


State 180

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   27     | expr AND $@1 M expr .
   29     | expr . OR $@2 M expr

    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85

    $default  reduce using rule 27 (expr)


State 181

   59 methodcall: D_DOT ID L_PAR elist . R_PAR

    R_PAR  shift, and go to state 188


State 182

   89 idlist: idlist COMMA ID .

    $default  reduce using rule 89 (idlist)


State 183

   81 funcdef: funcprefix funcargs funcblockstart funcbody funcblockend .

    $default  reduce using rule 81 (funcdef)


State 184

  103 forstmt: forprefix N elist R_PAR N . stmt $@5 N

    MINUS     shift, and go to state 1
    NOT       shift, and go to state 2
    D_PLUS    shift, and go to state 3
    D_MINUS   shift, and go to state 4
    L_BRA     shift, and go to state 5
    L_PAR     shift, and go to state 6
    INT       shift, and go to state 7
    REAL      shift, and go to state 8
    ID        shift, and go to state 9
    STRING    shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    FOR       shift, and go to state 13
    FUNC      shift, and go to state 14
    RETURN    shift, and go to state 15
    BREAK     shift, and go to state 16
    CONTINUE  shift, and go to state 17
    LOCAL     shift, and go to state 18
    TRUE      shift, and go to state 19
    FALSE     shift, and go to state 20
    NIL       shift, and go to state 21
    LC_BRA    shift, and go to state 22
    SEMI      shift, and go to state 23
    D_COLON   shift, and go to state 24

    stmt        go to state 189
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcprefix  go to state 37
    funcdef     go to state 38
    const       go to state 39
    ifprefix    go to state 40
    ifstmt      go to state 41
    whilestart  go to state 42
    whilestmt   go to state 43
    forprefix   go to state 44
    forstmt     go to state 45
    break       go to state 46
    continue    go to state 47
    returnstmt  go to state 48


State 185

   69 indexedelem: LC_BRA expr COLON expr RC_BRA .

    $default  reduce using rule 69 (indexedelem)


State 186

   55 call: L_PAR funcdef R_PAR L_PAR elist R_PAR .

    $default  reduce using rule 55 (call)


State 187

  101 forprefix: FOR $@4 L_PAR elist SEMI M . expr SEMI

    MINUS    shift, and go to state 1
    NOT      shift, and go to state 2
    D_PLUS   shift, and go to state 3
    D_MINUS  shift, and go to state 4
    L_BRA    shift, and go to state 5
    L_PAR    shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    ID       shift, and go to state 9
    STRING   shift, and go to state 10
    LOCAL    shift, and go to state 18
    TRUE     shift, and go to state 19
    FALSE    shift, and go to state 20
    NIL      shift, and go to state 21
    D_COLON  shift, and go to state 24

    expr        go to state 190
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 39


State 188

   59 methodcall: D_DOT ID L_PAR elist R_PAR .

    $default  reduce using rule 59 (methodcall)


State 189

  103 forstmt: forprefix N elist R_PAR N stmt . $@5 N

    $default  reduce using rule 102 ($@5)

    $@5  go to state 191


State 190

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MUL expr
   18     | expr . DIV expr
   19     | expr . MOD expr
   20     | expr . GREATER expr
   21     | expr . GREATER_EQ expr
   22     | expr . LESS expr
   23     | expr . LESS_EQ expr
   24     | expr . EQ expr
   25     | expr . NOT_EQ expr
   27     | expr . AND $@1 M expr
   29     | expr . OR $@2 M expr
  101 forprefix: FOR $@4 L_PAR elist SEMI M expr . SEMI

    OR          shift, and go to state 73
    AND         shift, and go to state 74
    EQ          shift, and go to state 75
    NOT_EQ      shift, and go to state 76
    GREATER     shift, and go to state 77
    GREATER_EQ  shift, and go to state 78
    LESS        shift, and go to state 79
    LESS_EQ     shift, and go to state 80
    PLUS        shift, and go to state 81
    MINUS       shift, and go to state 82
    MUL         shift, and go to state 83
    DIV         shift, and go to state 84
    MOD         shift, and go to state 85
    SEMI        shift, and go to state 192


State 191

  103 forstmt: forprefix N elist R_PAR N stmt $@5 . N

    $default  reduce using rule 98 (N)

    N  go to state 193


State 192

  101 forprefix: FOR $@4 L_PAR elist SEMI M expr SEMI .

    $default  reduce using rule 101 (forprefix)


State 193

  103 forstmt: forprefix N elist R_PAR N stmt $@5 N .

    $default  reduce using rule 103 (forstmt)
